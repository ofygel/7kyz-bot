import { Markup, Telegraf } from 'telegraf';

import type { BotContext, ExecutorRole } from '../../types';
import { getExecutorRoleCopy } from '../../copy';
import { presentRolePick } from '../../commands/start';
import {
  EXECUTOR_MENU_ACTION,
  EXECUTOR_VERIFICATION_ACTION,
  ensureExecutorState,
} from './menu';
import { ui, type UiStepResult } from '../../ui';

const SUPPORT_USERNAME = 'support_seven';
const SUPPORT_LINK = `https://t.me/${SUPPORT_USERNAME}`;

const ROLE_DOCUMENT_REQUIREMENTS: Record<ExecutorRole, string[]> = {
  courier: [
    '–§–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).',
    '–§–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ–±–æ—Ä–æ—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).',
    '–°–µ–ª—Ñ–∏ —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ —Ä—É–∫–∞—Ö.',
  ],
  driver: [
    '–§–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).',
    '–§–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–æ–±–æ—Ä–æ—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).',
    '–°–µ–ª—Ñ–∏ —Å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º –≤ —Ä—É–∫–∞—Ö.',
  ],
};

const buildRequirementsList = (role: ExecutorRole): string[] => {
  const requirements = ROLE_DOCUMENT_REQUIREMENTS[role] ?? ROLE_DOCUMENT_REQUIREMENTS.courier;
  return requirements.map((item, index) => `${index + 1}. ${item}`);
};

const buildVerificationInfoText = (role: ExecutorRole): string => {
  const copy = getExecutorRoleCopy(role);
  const requirements = buildRequirementsList(role);

  return [
    'üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
    '',
    `–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º ${copy.genitive}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @${SUPPORT_USERNAME}.`,
    '',
    '–ß—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å:',
    ...requirements,
    '',
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è.',
  ].join('\n');
};

const buildVerificationKeyboard = () =>
  Markup.inlineKeyboard([
    [Markup.button.url('–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', SUPPORT_LINK)],
    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', EXECUTOR_MENU_ACTION)],
  ]).reply_markup;

export const VERIFICATION_PROMPT_STEP_ID = 'executor:verification:info';
export const EXECUTOR_ROLE_SWITCH_ACTION = 'executor:verification:switch-role';
export const EXECUTOR_VERIFICATION_GUIDE_ACTION = 'executor:verification:guide';

export const showExecutorVerificationPrompt = async (
  ctx: BotContext,
  role: ExecutorRole,
): Promise<UiStepResult | undefined> => {
  const stepResult = await ui.step(ctx, {
    id: VERIFICATION_PROMPT_STEP_ID,
    text: buildVerificationInfoText(role),
    keyboard: buildVerificationKeyboard(),
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });

  return stepResult;
};

export const startExecutorVerification = async (ctx: BotContext): Promise<void> => {
  if (ctx.chat?.type !== 'private') {
    return;
  }

  const state = ensureExecutorState(ctx);
  const role = state.role;

  if (!role) {
    await presentRolePick(ctx, { withHint: true });
    return;
  }

  await showExecutorVerificationPrompt(ctx, role);
};

const handleRoleSwitch = async (ctx: BotContext): Promise<void> => {
  await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.');
  await presentRolePick(ctx, { withHint: true });
};

const handleGuide = async (ctx: BotContext): Promise<void> => {
  const state = ensureExecutorState(ctx);
  const role = state.role;
  if (!role) {
    await ctx.answerCbQuery();
    return;
  }

  const infoText = buildVerificationInfoText(role);
  try {
    await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.');
  } catch {
    // Ignore callback errors.
  }

  await ctx.reply(infoText, {
    reply_markup: buildVerificationKeyboard(),
  });
};

export const registerExecutorVerification = (bot: Telegraf<BotContext>): void => {
  bot.action(EXECUTOR_VERIFICATION_ACTION, async (ctx) => {
    await ctx.answerCbQuery();
    await startExecutorVerification(ctx);
  });

  bot.action(EXECUTOR_ROLE_SWITCH_ACTION, async (ctx) => {
    await handleRoleSwitch(ctx);
  });

  bot.action(EXECUTOR_VERIFICATION_GUIDE_ACTION, async (ctx) => {
    await handleGuide(ctx);
  });

  bot.hears(/–¥–æ–∫—É–º–µ–Ω—Ç/i, async (ctx, next) => {
    if (ctx.chat?.type !== 'private') {
      if (typeof next === 'function') {
        await next();
      }
      return;
    }

    await startExecutorVerification(ctx);
  });
};

export const __private__ = {
  buildVerificationInfoText,
  buildVerificationKeyboard,
};
