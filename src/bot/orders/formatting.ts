import type { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';

import { CITY_LABEL } from '../../domain/cities';
import type { OrderStatus, OrderWithExecutor } from '../../types';
import { buildInlineKeyboard } from '../keyboards/common';
import { formatDistance, formatEtaMinutes, formatPriceAmount } from '../services/pricing';

export const ORDER_KIND_ICONS: Record<OrderWithExecutor['kind'], string> = {
  taxi: 'üöï',
  delivery: 'üöö',
};

export const ORDER_KIND_LABELS: Record<OrderWithExecutor['kind'], string> = {
  taxi: '–¢–∞–∫—Å–∏',
  delivery: '–î–æ—Å—Ç–∞–≤–∫–∞',
};

const ORDER_STATUS_TEXT: Record<OrderStatus, { short: string; full: string }> = {
  new: { short: '–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', full: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º' },
  open: { short: '–æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', full: '–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' },
  claimed: { short: '–≤ —Ä–∞–±–æ—Ç–µ', full: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º' },
  in_progress: { short: '–≤ —Ä–∞–±–æ—Ç–µ', full: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' },
  cancelled: { short: '–æ—Ç–º–µ–Ω—ë–Ω', full: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω' },
  finished: { short: '–∑–∞–≤–µ—Ä—à—ë–Ω', full: '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω' },
  expired: { short: '–∏—Å—Ç—ë–∫', full: '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç—ë–∫' },
};

export const formatStatusLabel = (
  status: OrderStatus,
): { short: string; full: string } => ORDER_STATUS_TEXT[status] ?? { short: status, full: status };

const formatFullName = (first?: string, last?: string): string | undefined => {
  const full = [first?.trim(), last?.trim()].filter(Boolean).join(' ').trim();
  return full || undefined;
};

export const formatExecutorLabel = (order: OrderWithExecutor): string => {
  const executor = order.executor;
  if (!executor) {
    return typeof order.claimedBy === 'number' ? `ID ${order.claimedBy}` : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  const fullName = formatFullName(executor.firstName, executor.lastName);
  if (fullName && executor.username) {
    return `${fullName} (@${executor.username})`;
  }

  if (fullName) {
    return fullName;
  }

  if (executor.username) {
    return `@${executor.username}`;
  }

  return `ID ${executor.telegramId}`;
};

const normalisePhoneNumber = (phone: string): string => phone.replace(/[\s()-]/g, '');

export const buildOrderContactKeyboard = (
  order: OrderWithExecutor,
): InlineKeyboardMarkup | undefined => {
  if (order.status !== 'claimed' && order.status !== 'in_progress') {
    return undefined;
  }

  const executor = order.executor;
  if (!executor) {
    return undefined;
  }

  const rows: { label: string; url: string }[][] = [];
  const phone = executor.phone?.trim();
  if (phone) {
    rows.push([{ label: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', url: `tel:${normalisePhoneNumber(phone)}` }]);
  }

  const chatUrl = executor.username
    ? `https://t.me/${executor.username}`
    : executor.telegramId
    ? `tg://user?id=${executor.telegramId}`
    : undefined;
  if (chatUrl) {
    rows.push([{ label: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram', url: chatUrl }]);
  }

  if (rows.length === 0) {
    return undefined;
  }

  return buildInlineKeyboard(rows);
};

export interface OrderDetailOptions {
  confirmCancellation?: boolean;
}

export const buildOrderDetailText = (
  order: OrderWithExecutor,
  options: OrderDetailOptions,
): string => {
  const status = formatStatusLabel(order.status);
  const headerIcon = ORDER_KIND_ICONS[order.kind] ?? 'üì¶';
  const kindLabel = ORDER_KIND_LABELS[order.kind] ?? '–ó–∞–∫–∞–∑';
  const lines: string[] = [];

  lines.push(`${headerIcon} ${kindLabel} ‚Ññ${order.shortId}`);
  lines.push(`üèôÔ∏è –ì–æ—Ä–æ–¥: ${CITY_LABEL[order.city]}.`);
  lines.push(`–°—Ç–∞—Ç—É—Å: ${status.full}.`);
  lines.push('');
  lines.push(`üìç –ü–æ–¥–∞—á–∞: ${order.pickup.address}`);
  lines.push(`üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${order.dropoff.address}`);
  lines.push(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${formatDistance(order.price.distanceKm)} –∫–º`);
  lines.push(`‚è±Ô∏è –í –ø—É—Ç–∏: ‚âà${formatEtaMinutes(order.price.etaMinutes)} –º–∏–Ω`);
  lines.push(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPriceAmount(order.price.amount, order.price.currency)}`);

  if (order.clientComment?.trim()) {
    lines.push('', `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.clientComment.trim()}`);
  }

  if (order.status === 'claimed' || order.status === 'in_progress') {
    lines.push('');
    lines.push(`üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${formatExecutorLabel(order)}`);
    if (order.executor?.phone?.trim()) {
      lines.push(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.executor.phone.trim()}`);
    }
    if (order.executor?.username?.trim()) {
      lines.push(`üîó Telegram: @${order.executor.username.trim()}`);
    }
  }

  if (options.confirmCancellation) {
    lines.push('');
    lines.push('‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞. –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.');
    if (order.status === 'claimed' || order.status === 'in_progress') {
      lines.push('–ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è.');
    }
  }

  lines.push('');
  lines.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–æ–º.');

  return lines.join('\n');
};
