const test = require('node:test');
const assert = require('node:assert/strict');

require('ts-node/register/transpile-only');

const ensureEnv = (key, value) => {
  if (!process.env[key]) {
    process.env[key] = value;
  }
};

const ensureBotEnv = () => {
  ensureEnv('BOT_TOKEN', 'test-bot-token');
  ensureEnv('DATABASE_URL', 'postgres://user:pass@localhost:5432/db');
  ensureEnv('KASPI_CARD', '0000 0000 0000 0000');
  ensureEnv('KASPI_NAME', 'Test User');
  ensureEnv('KASPI_PHONE', '+70000000000');
  ensureEnv('SUPPORT_USERNAME', 'test_support');
  ensureEnv('SUPPORT_URL', 'https://t.me/test_support');
  ensureEnv('WEBHOOK_DOMAIN', 'example.com');
  ensureEnv('WEBHOOK_SECRET', 'secret');
};

const { handleHelp } = require('../src/bot/commands/help');

const createTestContext = () => {
  const replyMessages = [];
  const ctx = {
    chat: { id: 4242, type: 'private' },
    session: {
      client: {
        delivery: { stage: 'idle' },
        taxi: { stage: 'idle' },
      },
      support: { status: 'idle' },
      executor: {
        awaitingRoleSelection: false,
        roleSelectionStage: undefined,
      },
    },
    auth: {
      user: { role: 'client' },
      executor: {},
      isModerator: false,
    },
    replyMessages,
    reply: async (text) => {
      replyMessages.push(text);
      return { message_id: replyMessages.length };
    },
  };

  return ctx;
};

test('help suggests sending 2–ì–ò–° link when collecting delivery pickup', async () => {
  ensureBotEnv();
  const ctx = createTestContext();
  ctx.session.client.delivery = { stage: 'collectingPickup' };

  await handleHelp(ctx);

  const expected = [
    'üì¶ –û—Ñ–æ—Ä–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É.',
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É 2–ì–ò–° –Ω–∞ —Ç–æ—á–∫—É –∑–∞–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å 2–ì–ò–°¬ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ.',
    '–ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.',
    '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.',
  ].join('\n');

  assert.equal(ctx.replyMessages.length, 1);
  assert.equal(ctx.replyMessages[0], expected);
});

test('help highlights comment requirements for delivery orders', async () => {
  ensureBotEnv();
  const ctx = createTestContext();
  ctx.session.client.delivery = {
    stage: 'collectingComment',
    pickup: { address: '–ê–ª–º–∞—Ç—ã, —É–ª. –ü—É—à–∫–∏–Ω–∞ 1' },
    dropoff: { address: '–ê–ª–º–∞—Ç—ã, –ø—Ä. –ê–±–∞—è 10' },
    recipientPhone: '+77001234567',
  };

  await handleHelp(ctx);

  const expected = [
    'üì¶ –û—Ñ–æ—Ä–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É.',
    'üì¶ –ó–∞–±–æ—Ä: –ê–ª–º–∞—Ç—ã, —É–ª. –ü—É—à–∫–∏–Ω–∞ 1.',
    'üìÆ –î–æ—Å—Ç–∞–≤–∫–∞: –ê–ª–º–∞—Ç—ã, –ø—Ä. –ê–±–∞—è 10.',
    'üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: +77001234567.',
    '',
    '–î–æ–±–∞–≤—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–∞:',
    '‚Ä¢ –ß—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å.',
    '‚Ä¢ –ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å –∏ –∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è.',
    '‚Ä¢ –ü–æ–¥—ä–µ–∑–¥, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞ –∏ –¥—Ä—É–≥–∏–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã.',
    '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.',
  ].join('\n');

  assert.equal(ctx.replyMessages.length, 1);
  assert.equal(ctx.replyMessages[0], expected);
});

test('help reminds about confirmation buttons for taxi orders', async () => {
  ensureBotEnv();
  const ctx = createTestContext();
  ctx.session.client.taxi = {
    stage: 'awaitingConfirmation',
    pickup: { address: '–ê–ª–º–∞—Ç—ã, –¢–æ–ª–µ –±–∏ 50' },
    dropoff: { address: '–ê–ª–º–∞—Ç—ã, –ë–∞–π–∑–∞–∫–æ–≤–∞ 100' },
  };

  await handleHelp(ctx);

  const expected = [
    'üöï –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏.',
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–µ–∑–¥–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.',
    '–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
  ].join('\n');

  assert.equal(ctx.replyMessages.length, 1);
  assert.equal(ctx.replyMessages[0], expected);
});

test('help points to support instructions when awaiting moderator reply', async () => {
  ensureBotEnv();
  const ctx = createTestContext();
  ctx.session.support.status = 'awaiting_message';

  await handleHelp(ctx);

  const expected = [
    'üÜò –í—ã –Ω–∞ —à–∞–≥–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
    '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.',
    '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.',
  ].join('\n');

  assert.equal(ctx.replyMessages.length, 1);
  assert.equal(ctx.replyMessages[0], expected);
});

test('help explains executor role selection steps', async () => {
  ensureBotEnv();
  const ctx = createTestContext();
  ctx.session.client.delivery = { stage: 'idle' };
  ctx.session.client.taxi = { stage: 'idle' };
  ctx.session.executor.awaitingRoleSelection = true;
  ctx.session.executor.roleSelectionStage = 'executorKind';

  await handleHelp(ctx);

  const expected = [
    '–í—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.',
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ¬´–ö—É—Ä—å–µ—Ä¬ª –∏–ª–∏ ¬´–í–æ–¥–∏—Ç–µ–ª—å¬ª –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤–µ—Ä–Ω—ë—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏.',
  ].join('\n');

  assert.equal(ctx.replyMessages.length, 1);
  assert.equal(ctx.replyMessages[0], expected);
});
